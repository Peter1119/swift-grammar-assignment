//
//  main.swift
//  SwiftBasicAssignment
//
//  Created by 홍석현 on 8/22/25.
//

import Foundation

/// 상속과 프로토콜의 장단점 비교
/// 상속의 장점
/// 1. 상속은 코드 재사용성이 좋다.
///  - Car의 부모객체가 존재한다면 brand, model, year와 같은 프로퍼티를 자식 Car에서도 사용함에 있어서 동일한 코드를 작성하지 않아도 되기 때문에 반복 작업이 줄어든다.
///  - 부모에서 동작에 대한 정의를 미리했다면 자식들 또한 동일한 동작을 사용할 수 있어서 간결해진다.
/// 상속의 단점
/// 1. 설계가 복잡하다.
/// - 설계함에 있어서 부모의 동작과 항상 함께 생각하며 자식의 설계를 해야한다. 또한 부모에게 어떤 항목들이 있었는지 어떤 스펙이 존재하는지 잘 파악하고 있어야하며 부모의 크기가 거대해지고 책임이 많아진다면 상속 받는 자식들이 모든 것을 알고 활용하기 어려운 시점이 생길 수 있다고 생각된다. 또한 부모의 동작을 기대했지만 예측되지 않는 버그가 생긴다면 디버깅을 하는 것에 있어서 부모의 코드까지 살펴봐야하니 더 복잡할 것이다.
/// - Engine을 설계하는 것도 유사한 문제가 있었는데 Car의 내부에 Engine이 있고 이걸 따르는 자식들이 있으니 ElectricEngine과 같은 상속된 자식들에게 프로퍼티 또한 상속받은 자식객체라 깔끔하게 생각하기 어려웠던 것 같다.
/// 2. 단일 상속만 가능하다.
/// - HybridCar의 경우 추구에는 GasolineCar의 역할과 ElectricCar의 역할을 할 수 있다고 생각하는데 상속의 경우에는 다중 상속이 안되기 때문에 구현하기 까다롭다. 
///
/// 프로토콜의 장점
/// 1. 설계하기 비교적 쉽다.
/// - Protocol 즉 인터페이스는 해당 동작과 요구사항에 대한 청사진만 구현하면 되기 때문에 더 많이 고려할 것이 없고 사용하고 즉 채택하는 쪽에서 얼마나 잘 구현했는지만 생각하면 되기 때문에 생각하기 좋고 즉 설계하기 좋다.
/// - Protocol에 대해서 채택한 객체들을 생각할 때 이런 동작들을 잘 할 것이라고 기대하기 때문에 해당 객체의 동작들을 예상하기 쉽고 버그가 발생하더라도 해당 객체만 살펴보면 되기 때문에 디버깅이 쉬울 것으로 생각된다.
/// 2. 다중 채택이 가능 하다.
/// - 상속의 경우 단일 객체에 대한 단일 상속만 가능하지만 프로토콜의 채택은 동시에 여러가지를 채택할 수있어서 다양한 역할을 부여하고 여러 기능들을 조합하여 사용할 수 있다.
///
/// 프로토콜의 단점
/// 1. 코드의 재사용성이 떨어진다.
/// - 자동차들의 동일한 프로퍼티인 brand, year, model과 같은 프로퍼티들을 동일한 코드가 동일하게 들어가 있어서 코드의 재사용성이 떨어진다.
